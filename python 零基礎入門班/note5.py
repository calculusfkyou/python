"""
字典:

字典結構與串列類似，其元素是以 鍵-值 對方式儲存，照樣就可使用 鍵 來取得 值 。
#第一種方式，將元素置於 {} 中
#語法為: 字典名稱 = {鍵1:值1, 鍵2:值2, ...}
字串、浮點數、整數都可做為 鍵 ，但以字串做為 鍵 的情況最多。
ex:
dict = {"香蕉":20, "蘋果":50, "橘子":30}

#第二種方法是使用dict函式，再將 鍵-值 對置於 [] 中
#語法為: 字典名稱 = dict([[鍵1,值1], [鍵2,值2],...])
ex:
dict = dict([["香蕉",20], ["蘋果",50], ["橘子",30]])

#第三種方法也是使用dict函式，只要將鍵與值已等號連接起來即可
#語法為: 字典名稱 = dict(鍵1=值1, 鍵2=值2, ...)
#第三種語法的 鍵 不能使用數值，否則執行會產生錯誤

字典取值:
基本取值方式
#字典名稱[鍵]
ex: 
dict = {"香蕉":20, "蘋果":50, "橘子":30}    
print(dict["蘋果"])    # 50

當字典的鍵重複時:
ex: 
dict = {"香蕉":20, "蘋果":50, "橘子":30, "香蕉":25}
print(dict["香蕉"])     #25 ("香蕉":20被覆蓋)

當字典的鍵不存在時:
ex: 
dict = {"香蕉":20, "蘋果":50, "橘子":30}
print(dict[0])  #錯誤 (不能以位置數值作為索引)
print(dict["鳳梨"])     #錯誤 (不存在的鍵)

python提供了get方法可以取的字典元素值，即使鍵不存在也不會產生錯誤。
語法為: 字典名稱.get(鍵[, 預設值])
    沒有傳入預設值:鍵存在:返回鍵對應的值
    沒有傳入預設值:鍵不存在:返回none
    有傳入預設值:鍵存在:返回鍵對應的值
    有傳入預設值:鍵不存在:返回預設值
ex:
dict = {"香蕉":20, "蘋果":50, "橘子":30}
print(dict.get("蘋果"))     #50
print(dict.get("鳳梨"))     #none
print(dict.get("蘋果", 80))     #50
print(dict.get("鳳梨", 80))     #80

修改字典:
#語法為:字典名稱[鍵] = 值
ex1:
dict = {"香蕉":20, "蘋果":50, "橘子":30}
dict["橘子"] = 60
print(dict["橘子"])    #60
ex2:
dict = {"香蕉":20, "蘋果":50, "橘子":30}
dict = ["鳳梨"] = 40
print(dict)     #{"香蕉":20, "蘋果":50, "橘子":30, "鳳梨" : 40}

刪除字典:
第一種是刪除字典中特定元素
#語法為: del 字典名稱[鍵]

第二種使刪除字典中所有元素
#語法為: 字典名稱.clear()
dict = {"香蕉":20, "蘋果":50, "橘子":30}
del dict["蘋果"]    #刪除 "蘋果":50 元素
print(dict)    #{"香蕉":20, "橘子":30}
dict.clear()    #刪除所有元素
print()       #{}  #空字典

第三種是刪除字典，字典刪除後該字典就不存在
#語法為: del 字典名稱
dict = {"香蕉":20, "蘋果":50, "橘子":30}
del dict    #刪除dict字典
print(dict)  #產生錯誤，dict字典不存在
"""
